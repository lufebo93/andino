/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.com.cebycam.vistas.Medico;

import ec.com.cebycam.accesodatos.Conexion;
import static ec.com.cebycam.vistas.Medico.frmPrincipal.txtMedicoWelcome;
import java.awt.event.*;
import java.io.IOException;
import java.sql.*;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.*;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.export.SimpleExporterInput;
import net.sf.jasperreports.export.SimplePdfExporterConfiguration;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author lufeb
 */
public final class frmImpresionExamen extends javax.swing.JFrame {
    TableRowSorter trsFiltro;
    DefaultTableModel modelo;
    /**
     * Creates new form frmImpresionExamen
     * @throws java.sql.SQLException
     * @throws java.io.IOException
     */
    public frmImpresionExamen() throws SQLException, IOException {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/ec/com/cebycam/imagenes/icono.png")).getImage());
        setLocationRelativeTo(null);
        setResizable(false);
        cargarTabla();
        ordenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cmbListar = new javax.swing.JComboBox<>();
        txtBusqueda = new javax.swing.JTextField();
        btnRefresh = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtCodigoExamen = new javax.swing.JTextField();
        txtPara = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtContenido = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPacienteReporte = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtMedicoReporte = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CEBYCAM-CES :: Impresión de exámenes ");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabla.setAutoscrolls(false);
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        jLabel1.setText("Buscar por:");

        cmbListar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID Exámen", "Paciente", "Médico" }));

        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyTyped(evt);
            }
        });

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ec/com/cebycam/imagenes/refresh-0.png")));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ec/com/cebycam/imagenes/imprimir.png"))); // NOI18N
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        jLabel2.setText("ID Exámen");

        txtCodigoExamen.setEditable(false);
        txtCodigoExamen.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodigoExamen.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtPara.setEditable(false);
        txtPara.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("Para:");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Contenido"));

        txtContenido.setEditable(false);
        txtContenido.setColumns(20);
        txtContenido.setLineWrap(true);
        txtContenido.setRows(5);
        jScrollPane2.setViewportView(txtContenido);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        jLabel4.setText("Fecha de Atención:");

        txtFecha.setEditable(false);
        txtFecha.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtFecha.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel5.setText("Paciente");

        txtPacienteReporte.setEditable(false);
        txtPacienteReporte.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel6.setText("Médico");

        txtMedicoReporte.setEditable(false);
        txtMedicoReporte.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbListar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtMedicoReporte))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGap(17, 17, 17)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txtCodigoExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(25, 25, 25)
                                            .addComponent(txtPara, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtPacienteReporte)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(22, 22, 22))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(txtPacienteReporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtPara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtMedicoReporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(cmbListar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCodigoExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void cargarTabla() throws SQLException, IOException{
        Conexion con = new Conexion();
        con.conectar();
        ResultSet rs = null;
        modelo = new DefaultTableModel();
        modelo.addColumn("ID Exámen");
        modelo.addColumn("Médico");
        modelo.addColumn("Paciente");
        modelo.addColumn("Contenido");
        modelo.addColumn("Para");
        modelo.addColumn("Fecha de atención");
        
        
        try{
            rs = con.ejecutarQuery("SELECT \n" +
"orden_de_examen.\"codigo\" as \"ID Examen\", \n" +
"medico.\"nombre\", \n" +
"historia_clinica.\"paciente\",\n" +
"orden_de_examen.\"contenido\", \n" +
"orden_de_examen.\"para\", \n" +
"atencion.\"fecha\" \n" +
"FROM public.\"orden de examen\" orden_de_examen inner join public.\"atencion\" atencion on orden_de_examen.\"atencion\"=atencion.\"codigo\"\n" +
"inner join public.\"medico\" medico on atencion.\"medico\"=medico.\"codigo\" inner join public.\"historia clinica\" historia_clinica on atencion.\"historia clinica\"=historia_clinica.\"codigo\""
                    + "where medico.\"nombre\"='"+txtMedicoWelcome.getText()+"';");
            ResultSetMetaData md = rs.getMetaData();
            int columnCount = md.getColumnCount();
            String[] cols = new String[columnCount];
            for (int i=1;i<= columnCount;i++){
                cols[i-1] = md.getColumnName(i);
            }
            while (rs.next()){
                Object[] row = new Object[columnCount];
                for (int i = 1 ; i <= columnCount ; i++){
                    row[i-1] = rs.getObject(i);
                }
                modelo.addRow(row);
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, "Error: "+e,
                    "CEBYCAM-CES", JOptionPane.INFORMATION_MESSAGE);
        }finally {
            con.desconectar();
            rs.close();
        }
        
        tabla.setModel(modelo);
        modelo.fireTableDataChanged();
    }
    
    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        int selectedRowIndex = tabla.rowAtPoint(evt.getPoint());
        txtCodigoExamen.setText(tabla.getValueAt(selectedRowIndex, 0).toString());
        txtMedicoReporte.setText(tabla.getValueAt(selectedRowIndex, 1).toString());
        txtPacienteReporte.setText(tabla.getValueAt(selectedRowIndex, 2).toString());
        txtContenido.setText(tabla.getValueAt(selectedRowIndex, 3).toString());
        txtPara.setText(tabla.getValueAt(selectedRowIndex, 4).toString());
        txtFecha.setText(tabla.getValueAt(selectedRowIndex, 5).toString());
    }//GEN-LAST:event_tablaMouseClicked

    public void ordenarTabla(){
        TableRowSorter<TableModel> ordenar = new TableRowSorter<>(modelo);
        tabla.setRowSorter(ordenar);
    }
    
    public void filtro() {
        int columnaABuscar = 0;
        if (cmbListar.getSelectedItem().equals("ID Examen")) {
            columnaABuscar = 0;
        }
        if (cmbListar.getSelectedItem() == "Paciente") {
            columnaABuscar = 2;
        }
        if (cmbListar.getSelectedItem() == "Médico") {
            columnaABuscar = 1;
        }
        String replace = txtBusqueda.getText();
        replace = replace.replace("e", "(é)");
        trsFiltro.setRowFilter(RowFilter.regexFilter("(?i).*"+replace+".*", columnaABuscar));
        tabla.setRowSorter(trsFiltro);
    }
    
    private void txtBusquedaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyTyped
        txtBusqueda.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(final KeyEvent e) {
                String cadena = (txtBusqueda.getText());
                txtBusqueda.setText(cadena);
                repaint();
                filtro();
            }
        });
        trsFiltro = new TableRowSorter(tabla.getModel());
        tabla.setRowSorter(trsFiltro);
    }//GEN-LAST:event_txtBusquedaKeyTyped

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        Conexion con = new Conexion();
        try {
            con.conectar();
        } catch (IOException ex) {
            Logger.getLogger(frmImpresionExamen.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSet rs = null;
        if(txtCodigoExamen.getText().equals("")||txtFecha.getText().equals("")||txtPara.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Debe escoger un paciente de la lista",
                            "CEBYCAM-CES", JOptionPane.INFORMATION_MESSAGE);
        }else{
            try{ 
                String fileName = "ReporteExamenClinico.jasper";
                String sql="SELECT \n" +
"historia_clinica.\"paciente\" AS nombre_paciente,\n" +
"historia_clinica.\"edad\" AS edad_paciente,\n" +
"atencion.\"fecha\" AS atencion_fecha, \n" +
"medico.\"nombre\" as medico_tratante,\n" +
"orden_de_examen.\"contenido\" AS examen_contenido,\n" +
"orden_de_examen.\"para\" AS examen_para,\n" +
"atencion.\"diagnostico\" AS examen_diagnostico\n" +
"FROM \n" +
"public.\"historia clinica\" historia_clinica inner join public.\"atencion\" atencion on historia_clinica.\"codigo\"=atencion.\"historia clinica\"\n" +
"inner join public.\"medico\" medico on atencion.\"medico\"=medico.\"codigo\" inner join public.\"orden de examen\" orden_de_examen on atencion.\"codigo\"= orden_de_examen.\"atencion\" where atencion.\"fecha\"='"+Date.valueOf(txtFecha.getText())+"' and orden_de_examen.\"codigo\"='"+Integer.parseInt(txtCodigoExamen.getText())+"';";
                rs = con.ejecutarQuery(sql);
                JRResultSetDataSource resultSetDataSource = new JRResultSetDataSource(rs);
                JasperPrint jasperPrint=JasperFillManager.fillReport(fileName, new HashMap(), resultSetDataSource);
                JasperViewer viever = new JasperViewer(jasperPrint,false);
                viever.setTitle("Vista Preliminar");
                viever.setIconImage(new ImageIcon(getClass().getResource("/ec/com/cebycam/imagenes/icono.png")).getImage());
                viever.setVisible(true);

                JRPdfExporter exporter = new JRPdfExporter();
                exporter.setExporterInput(new SimpleExporterInput(jasperPrint));
                SimplePdfExporterConfiguration configuration = new SimplePdfExporterConfiguration();
                exporter.setConfiguration(configuration);
            }catch (NumberFormatException | JRException e){
                JOptionPane.showMessageDialog(this, "No ha seleccionado la información del paciente "+e,
                            "CEBYCAM-CES", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                Logger.getLogger(frmImpresionExamen.class.getName()).log(Level.SEVERE, null, ex);
            }finally {
                con.desconectar();
                try {
                    rs.close();
                } catch (SQLException ex) {
                    Logger.getLogger(frmImpresionExamen.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        Conexion con = new Conexion();
        try {
            con.conectar();
        } catch (IOException ex) {
            Logger.getLogger(frmImpresionExamen.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSet rs = null;
        modelo.setRowCount( 0 );
        
        try{
            rs = con.ejecutarQuery("SELECT \n" +
"orden_de_examen.\"codigo\" as \"ID Examen\", \n" +
"medico.\"nombre\", \n" +
"historia_clinica.\"paciente\",\n" +
"orden_de_examen.\"contenido\", \n" +
"orden_de_examen.\"para\", \n" +
"atencion.\"fecha\" \n" +
"FROM public.\"orden de examen\" orden_de_examen inner join public.\"atencion\" atencion on orden_de_examen.\"atencion\"=atencion.\"codigo\"\n" +
"inner join public.\"medico\" medico on atencion.\"medico\"=medico.\"codigo\" inner join public.\"historia clinica\" historia_clinica on atencion.\"historia clinica\"=historia_clinica.\"codigo\" "
                    + "where medico.\"nombre\"='"+txtMedicoWelcome.getText()+"';");
            ResultSetMetaData md = rs.getMetaData();
            int columnCount = md.getColumnCount();
            String[] cols = new String[columnCount];
            for (int i=1;i<= columnCount;i++){
                cols[i-1] = md.getColumnName(i);
            }
            while (rs.next()){
                Object[] row = new Object[columnCount];
                for (int i = 1 ; i <= columnCount ; i++){
                    row[i-1] = rs.getObject(i);
                }
                modelo.addRow(row);
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, "Error: "+e,
                    "CEBYCAM-CES", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(frmImpresionExamen.class.getName()).log(Level.SEVERE, null, ex);
        }finally {
            con.desconectar();
            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(frmImpresionExamen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        tabla.setModel(modelo);
        modelo.fireTableDataChanged();
    }//GEN-LAST:event_btnRefreshActionPerformed

    /**
     * @param args the command line arguments
     */
//    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JComboBox<String> cmbListar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField txtBusqueda;
    private javax.swing.JTextField txtCodigoExamen;
    private javax.swing.JTextArea txtContenido;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtMedicoReporte;
    private javax.swing.JTextField txtPacienteReporte;
    private javax.swing.JTextField txtPara;
    // End of variables declaration//GEN-END:variables
}
